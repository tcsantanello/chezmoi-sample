#!/bin/bash -x

set -o errexit

export PATH=$PATH:/usr/local/bin
DOCKER_USERNAME=kystrannies
DOCKER_PASSWORD=kystrannies
DOCKER_AUTH="$( echo -n ${DOCKER_USERNAME}:${DOCKER_PASSWORD} | openssl base64 )"

# create registry container unless it already exists
reg_name='kind-registry'
reg_port='5000'
running="$(docker inspect -f '{{.State.Running}}' "${reg_name}" 2>/dev/null || true)"
if [ "${running}" != 'true' ]; then
  docker run \
    -d --restart=always -p "127.0.0.1:${reg_port}:5000" --name "${reg_name}" \
    registry:2
fi

reg_ip=$( ifconfig | awk '/inet /&&!/127|-->/ { print $2 }' )

# create a cluster with the local registry enabled in containerd
cat <<EOF | kind create cluster --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
name: kind
nodes:
- role: control-plane
  extraMounts:
  - hostPath: "${HOME}/Volumes/Kind"
    containerPath: /u/volumes
  extraPortMappings:
  - containerPort: 80
    hostPort: 80
    protocol: TCP
  - containerPort: 443
    hostPort: 443 
    protocol: TCP
containerdConfigPatches:
- |-
  [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost"]
    endpoint = ["http://${reg_ip}:${reg_port}"]
    insecure_skip_verify = true

  [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
    endpoint = ["https://registry-1.docker.io"]

  [plugins."io.containerd.grpc.v1.cri".registry.configs.tls]
    insecure_skip_verify = true

  [plugins."io.containerd.grpc.v1.cri".registry.configs."gcr.io".tls]
    insecure_skip_verify = true

  [plugins."io.containerd.grpc.v1.cri".registry.configs."quay.io".tls]
    insecure_skip_verify = true

  [plugins."io.containerd.grpc.v1.cri".registry.configs."registry-1.docker.io".tls]
    insecure_skip_verify = true

  [plugins."io.containerd.grpc.v1.cri".registry.configs."docker.io".tls]
    insecure_skip_verify = true

  [plugins."io.containerd.grpc.v1.cri".registry.configs."registry.k8s.io".tls]
    insecure_skip_verify = true

  [plugins."io.containerd.grpc.v1.cri".registry.configs."registry-1.docker.io".auth]
    auth = "${DOCKER_AUTH}"
    username = "${DOCKER_USERNAME}"
    password = "${DOCKER_PASSWORD}"

  [plugins."io.containerd.grpc.v1.cri".registry.configs."docker.io".auth]
    auth = "${DOCKER_AUTH}"
    username = "${DOCKER_USERNAME}"
    password = "${DOCKER_PASSWORD}"
EOF

# connect the registry to the cluster network
# (the network may already be connected)
docker network connect "kind" "${reg_name}" || true

# Document the local registry
# https://github.com/kubernetes/enhancements/tree/master/keps/sig-cluster-lifecycle/generic/1755-communicating-a-local-registry
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-registry-hosting
  namespace: kube-public
data:
  localRegistryHosting.v1: |
    host: "localhost:${reg_port}"
    help: "https://kind.sigs.k8s.io/docs/user/local-registry/"
EOF

kubectl create namespace imagepullsecret-patcher
kubectl apply -f https://raw.githubusercontent.com/titansoft-pte-ltd/imagepullsecret-patcher/185aec934bd01fa9b6ade2c44624e5f2023e2784/deploy-example/kubernetes-manifest/1_rbac.yaml
kubectl apply -f https://raw.githubusercontent.com/titansoft-pte-ltd/imagepullsecret-patcher/master/deploy-example/kubernetes-manifest/2_deployment.yaml

kubectl delete secret image-pull-secret-src -n imagepullsecret-patcher
kubectl create secret docker-registry image-pull-secret-src \
        --docker-server=docker.io \
        --docker-username=${DOCKER_USERNAME} \
        --docker-password=${DOCKER_PASSWORD} \
        -n imagepullsecret-patcher

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
kubectl patch -n ingress-nginx deploy ingress-nginx-controller --type=json -p='[{"op": "remove", "path": "/spec/template/spec/tolerations"},{"op": "remove", "path": "/spec/template/spec/nodeSelector"}]'
